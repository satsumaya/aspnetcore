<Project>

  <Target Name="_ComputeServiceWorkerAssetsManifestInputs"
          Condition="'$(ServiceWorkerAssetsManifest)' != ''"
          BeforeTargets="_ResolveBlazorOutputs">

    <PropertyGroup>
      <_ServiceWorkerAssetsManifestIntermediateOutputPath>$(_BlazorIntermediateOutputPath)serviceworkerassets.js</_ServiceWorkerAssetsManifestIntermediateOutputPath>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorOutputWithTargetPath Condition="'$(ServiceWorkerAssetsManifest)' != ''"
        Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
        TargetOutputPath="$(_BaseBlazorDistPath)$(ServiceWorkerAssetsManifest)" />
    </ItemGroup>

  </Target>

  <UsingTask TaskName="GenerateServiceWorkerAssetsManifest" AssemblyFile="$(_BlazorTasksPath)" />

  <Target Name="_WriteServiceWorkerAssetsManifest"
          Condition="'$(ServiceWorkerAssetsManifest)' != ''"
          Inputs="@(ServiceWorkerAssetsManifestItem)"
          Outputs="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)"
          BeforeTargets="_BlazorStaticWebAssetsCopyGeneratedFilesToOutputDirectory"
          DependsOnTargets="_ComputeServiceWorkerAssetsManifestFileHashes; _ComputeDefaultServiceWorkerAssetsManifestVersion">

    <GenerateServiceWorkerAssetsManifest
      Version="$(ServiceWorkerAssetsManifestVersion)"
      AssetsWithHashes="@(_ServiceWorkerAssetsManifestItemWithHash)"
      OutputPath="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />

    <ItemGroup>
      <FileWrites Include="$(_ServiceWorkerAssetsManifestIntermediateOutputPath)" />
    </ItemGroup>

  </Target>

  <Target Name="_ComputeServiceWorkerAssetsManifestFileHashes">

    <ItemGroup>
      <ServiceWorkerAssetsManifestItem
        Include="%(StaticWebAsset.Identity)"
        Condition="'%(RelativePath)' != '$(ServiceWorkerAssetsManifest)'">
        <AssetUrl>$([System.String]::Copy('$([System.String]::Copy('%(StaticWebAsset.BasePath)').TrimEnd('/'))/%(StaticWebAsset.RelativePath)').Replace('\','/').TrimStart('/'))</AssetUrl>
      </ServiceWorkerAssetsManifestItem>

      <!-- Don't include compressed files in the manifest, since their existence is transparent to the client -->
      <ServiceWorkerAssetsManifestItem Remove="@(_CompressedStaticWebAsset->'%(FullPath)')" />

      <!-- Don't include the service worker files in the manifest, as the service worker doesn't need to fetch itself -->
      <_ServiceWorkerSourcesToRemove Include="@(_ServiceWorkerSource->'%(IntermediatePath)')" />
      <ServiceWorkerAssetsManifestItem Remove="@(_ServiceWorkerSourcesToRemove->'%(FullPath)')" />
    </ItemGroup>

    <GetFileHash Files="@(ServiceWorkerAssetsManifestItem)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestItemWithHash" />
    </GetFileHash>
  </Target>

  <!--
    Compute a default ServiceWorkerAssetsManifestVersion value by combining all the asset hashes.
    This is useful because then clients will only have to repopulate caches if the contents have changed.
  -->
  <Target Name="_ComputeDefaultServiceWorkerAssetsManifestVersion">
    <PropertyGroup>
      <_CombinedHashIntermediatePath>$(_BlazorIntermediateOutputPath)serviceworkerhashes.txt</_CombinedHashIntermediatePath>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(_CombinedHashIntermediatePath)"
      Lines="@(_ServiceWorkerAssetsManifestItemWithHash->'%(FileHash)')"
      WriteOnlyWhenDifferent="true"
      Overwrite="true" />

    <GetFileHash Files="$(_CombinedHashIntermediatePath)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_ServiceWorkerAssetsManifestCombinedHash" />
    </GetFileHash>

    <PropertyGroup>
      <ServiceWorkerAssetsManifestVersion Condition="'$(ServiceWorkerAssetsManifestVersion)' == ''">$([System.String]::Copy('%(_ServiceWorkerAssetsManifestCombinedHash.FileHash)').Substring(0, 8))</ServiceWorkerAssetsManifestVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_ComputeServiceWorkerOutputs"
          BeforeTargets="AssignTargetPaths"
          DependsOnTargets="_ComputeServiceWorkerOutputsPerServiceWorker">
    <ItemGroup>
      <!-- Service worker files and their PublishedContent variants aren't regular content items, so remove them from @(Content) -->
      <Content Remove="@(ServiceWorker); %(ServiceWorker.PublishedContent)" />

      <!-- However, do include the rewritten service worker files in the output -->
      <Content Include="@(_ServiceWorkerSource->'%(IntermediatePath)')" />
    </ItemGroup>
  </Target>

  <Target Name="_ComputeServiceWorkerOutputsPerServiceWorker"
          Inputs="@(ServiceWorker)"
          Outputs="%(Identity).nonexistent">
    <PropertyGroup>
      <!-- If there is a PublishedContent variant, prepare to use that. If not, use the identity. -->
      <_ServiceWorkerIdentity>%(ServiceWorker.Identity)</_ServiceWorkerIdentity>
      <_ServiceWorkerContentSourcePath Condition="'%(ServiceWorker.PublishedContent)' != ''">%(ServiceWorker.PublishedContent)</_ServiceWorkerContentSourcePath>
      <_ServiceWorkerContentSourcePath Condition="'%(ServiceWorker.PublishedContent)' == ''">$(_ServiceWorkerIdentity)</_ServiceWorkerContentSourcePath>
    </PropertyGroup>

    <ItemGroup>
      <_ServiceWorkerSource Include="$(_ServiceWorkerContentSourcePath)">
        <IntermediatePath>$(IntermediateOutputPath)blazor\serviceworkers\$(_ServiceWorkerIdentity)</IntermediatePath>
        <Link>$(_ServiceWorkerIdentity)</Link>
      </_ServiceWorkerSource>
    </ItemGroup>
  </Target>

  <!-- Once we've computed a SWAM version, we can create service worker intermediate files with that version appended -->
  <Target Name="_GenerateServiceWorkerIntermediateFile"
          AfterTargets="_ComputeDefaultServiceWorkerAssetsManifestVersion"
          DependsOnTargets="_GenerateServiceWorkerIntermediateFilePerServiceWorker">
  </Target>

  <Target Name="_GenerateServiceWorkerIntermediateFilePerServiceWorker"
          Inputs="@(_ServiceWorkerSource); $(_CombinedHashIntermediatePath)"
          Outputs="%(IntermediatePath)">
    <Copy SourceFiles="@(_ServiceWorkerSource)" DestinationFiles="%(IntermediatePath)" />
    <WriteLinesToFile File="%(_ServiceWorkerSource.IntermediatePath)" Lines="/* Manifest version: $(ServiceWorkerAssetsManifestVersion) */" />
    <ItemGroup>
      <FileWrites Include="%(_ServiceWorkerSource.IntermediatePath)" />
    </ItemGroup>
  </Target>

</Project>
